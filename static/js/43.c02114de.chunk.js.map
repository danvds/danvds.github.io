{"version":3,"sources":["components/Calendar.jsx"],"names":["Calendar","state","currentMonth","Date","selectedDate","onDateClick","day","setState","nextMonth","addMonths","prevMonth","subMonths","className","onClick","this","format","days","startDate","startOfWeek","i","push","addDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","isSameMonth","isSameDay","renderHeader","renderDays","renderCells","React","Component"],"mappings":"8UAKMA,E,4MACFC,MAAQ,CACJC,aAAc,IAAIC,KAClBC,aAAc,IAAID,M,EAoFpBE,YAAc,SAAAC,GACZ,EAAKC,SAAS,CACZH,aAAcE,K,EAIpBE,UAAY,WACR,EAAKD,SAAS,CACZL,aAAcO,YAAU,EAAKR,MAAMC,aAAc,M,EAKvDQ,UAAY,WACR,EAAKH,SAAS,CACZL,aAAcS,YAAU,EAAKV,MAAMC,aAAc,M,kDAhGvD,WAGI,OACI,sBAAKU,UAAU,yBAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,qBAAKA,UAAU,OAAOC,QAASC,KAAKJ,UAApC,4BAEJ,sBAAKE,UAAU,iBAAf,UACQ,+BACKG,YAAOD,KAAKb,MAAMC,aATpB,eAUI,uBACP,sBAAMU,UAAU,OAAhB,SACI,4BAAIG,YAAOD,KAAKb,MAAMG,aAAc,yBAGhD,qBAAKQ,UAAU,cAAf,SACQ,qBAAKA,UAAU,OAAOC,QAASC,KAAKN,UAApC,kC,wBAMpB,WAII,IAHA,IACMQ,EAAO,GACTC,EAAYC,YAAYJ,KAAKb,MAAMC,cAC9BiB,EAAI,EAAGA,EAAI,EAAGA,IACrBH,EAAKI,KACH,qBAAKR,UAAU,iBAAf,SACGG,YAAOM,YAAQJ,EAAWE,GANd,SAKsBA,IAKzC,OAAO,qBAAKP,UAAU,WAAf,SAA2BI,M,yBAGtC,WAcI,IAdW,IAAD,SAC6BF,KAAKb,MAApCC,EADE,EACFA,aAAcE,EADZ,EACYA,aAChBkB,EAAaC,YAAarB,GAC1BsB,EAAWC,YAAWH,GACtBL,EAAYC,YAAYI,GACxBI,EAAUC,YAAUH,GAGpBI,EAAO,GAETZ,EAAO,GACPV,EAAMW,EACNY,EAAgB,GAEbvB,GAAOoB,GAAS,CACrB,IADsB,IAAD,WACZP,GACPU,EAAgBd,YAAOT,EATR,KAUf,IAAMwB,EAAWxB,EACjBU,EAAKI,KACH,sBACER,UAAS,mBACNmB,YAAYzB,EAAKgB,GAEdU,YAAU1B,EAAKF,GAAgB,WAAa,GAD5C,YAINS,QAAS,kBAAM,EAAKR,YAAYyB,IAPlC,UASE,sBAAMlB,UAAU,SAAhB,SAA0BiB,IAC1B,sBAAMjB,UAAU,KAAhB,SAAsBiB,MAJjBvB,IAOTA,EAAMe,YAAQf,EAAK,IAjBZa,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAmB7BS,EAAKR,KACH,qBAAKR,UAAU,MAAf,SACGI,GADuBV,IAI5BU,EAAO,GAET,OAAO,qBAAKJ,UAAU,OAAf,SAAuBgB,M,oBAuBlC,WACI,OACI,sBAAKhB,UAAU,WAAf,UACKE,KAAKmB,eACLnB,KAAKoB,aACLpB,KAAKqB,qB,GAhHCC,IAAMC,WAsHdrC","file":"static/js/43.c02114de.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport {format, addDays, addMonths, subMonths, endOfMonth, endOfWeek, startOfMonth, startOfWeek, isSameDay, isSameMonth} from 'date-fns';\r\n\r\n\r\nclass Calendar extends React.Component{\r\n    state = {\r\n        currentMonth: new Date(),\r\n        selectedDate: new Date()\r\n    };\r\n\r\n    renderHeader() {\r\n        const dateFormat = \"MMMM yyyy\";\r\n\r\n        return (\r\n            <div className=\"header row flex-middle\">\r\n                <div className=\"col col-start\" >\r\n                    <div className=\"icon\" onClick={this.prevMonth}>chevron_left</div>\r\n                </div>\r\n                <div className=\"col col-center\">\r\n                        <span>\r\n                            {format(this.state.currentMonth, dateFormat)}\r\n                        </span><br/>\r\n                        <span className=\"days\">\r\n                            <b>{format(this.state.selectedDate, \"dd / MM / yyyy\")}</b>\r\n                        </span>\r\n                </div>\r\n                <div className=\"col col-end\">\r\n                        <div className=\"icon\" onClick={this.nextMonth}>chevron_right</div>\r\n                </div>\r\n            </div>            \r\n        );\r\n    }\r\n\r\n    renderDays() {\r\n        const dateFormat = \"EEEE\";\r\n        const days = [];\r\n        let startDate = startOfWeek(this.state.currentMonth);\r\n        for (let i = 0; i < 7; i++) {\r\n          days.push(\r\n            <div className=\"col col-center\" key={i}>\r\n              {format(addDays(startDate, i), dateFormat)}\r\n            </div>\r\n          );\r\n        }\r\n        return <div className=\"days row\">{days}</div>;\r\n      }\r\n\r\n    renderCells() {\r\n        const { currentMonth, selectedDate } = this.state;\r\n        const monthStart = startOfMonth(currentMonth);\r\n        const monthEnd = endOfMonth(monthStart);\r\n        const startDate = startOfWeek(monthStart);\r\n        const endDate = endOfWeek(monthEnd);\r\n\r\n        const dateFormat = \"d\";\r\n        const rows = [];\r\n    \r\n        let days = [];\r\n        let day = startDate;\r\n        let formattedDate = \"\";\r\n    \r\n        while (day <= endDate) {\r\n          for (let i = 0; i < 7; i++) {\r\n            formattedDate = format(day, dateFormat);\r\n            const cloneDay = day;\r\n            days.push(\r\n              <div\r\n                className={`col cell ${\r\n                  !isSameMonth(day, monthStart)\r\n                    ? \"disabled\"\r\n                    : isSameDay(day, selectedDate) ? \"selected\" : \"\"\r\n                }`}\r\n                key={day}\r\n                onClick={() => this.onDateClick(cloneDay)}\r\n              >\r\n                <span className=\"number\">{formattedDate}</span>\r\n                <span className=\"bg\">{formattedDate}</span>\r\n              </div>\r\n            );\r\n            day = addDays(day, 1);\r\n          }\r\n          rows.push(\r\n            <div className=\"row\" key={day}>\r\n              {days}\r\n            </div>\r\n          );\r\n          days = [];\r\n        }\r\n        return <div className=\"body\">{rows}</div>;\r\n      }\r\n\r\n      onDateClick = day => {\r\n        this.setState({\r\n          selectedDate: day\r\n        });\r\n      };\r\n\r\n    nextMonth = () => {\r\n        this.setState({\r\n          currentMonth: addMonths(this.state.currentMonth, 1)\r\n        });\r\n      };\r\n\r\n\r\n    prevMonth = () => {\r\n        this.setState({\r\n          currentMonth: subMonths(this.state.currentMonth, 1)\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"calendar\">\r\n                {this.renderHeader()}\r\n                {this.renderDays()}\r\n                {this.renderCells()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calendar;"],"sourceRoot":""}